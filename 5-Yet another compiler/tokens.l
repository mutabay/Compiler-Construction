%option noyywrap
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    // Generated by bison
    #include "lalr.tab.h"
%}

DIGIT   [0-9]
ALPHA   [A-Za-z]
IDENTIFIER       (_|{ALPHA})+(_|{ALPHA}|{DIGIT})*

NUMBER {DIGIT}+
REAL_NUMBER        {NUMBER}("."{NUMBER})?(E{NUMBER})?
WHITESPACE  ([ \t]+)

COMMENT         ("{"[^"}"]*"}")


%%
"program"       {return PROGRAM;}
"var"           {return VAR;}
"integer"       {return INTEGER;}
"array"         {return ARRAY;}
"of"            {return OF;}
"real"          {return REAL;}
"function"      {return FUNCTION;}
"begin"         {return BEGIN_TOKEN;}
"while"         {return WHILE;}
"do"            {return DO;}
"if"            {return IF;}
"then"          {return THEN;}
"else"          {return ELSE;}
"end"           {return END;}
"boolean"       {return BOOLEAN;}
"procedure"     {return PROCEDURE;}
"div"           {return DIV;}
"not"           {return NOT;}
"mod"           {return MOD;}
"and"           {return AND;}
"or"            {return OR;}
">"             {return GREATER;}
"<"             {return LESS;}
"<="            {return LESS_EQUAL;}
">="            {return GREATER_EQUAL;}
"<>"            {return NOT_EQUAL;}
"="             {return EQUAL;}
"+"             {return PLUS;}
"-"             {return MINUS;}
"/"             {return DIVISION;}
"*"             {return MULTIPLICATION;}
"["             {return SQUARE_BRACKETS_OPEN;}
"]"             {return SQUARE_BRACKETS_CLOSE;}
"("             {return BRACKETS_OPEN;}
")"             {return BRACKETS_CLOSE;}
"."             {return DOT;}
":"             {return COLON;}
":="            {return ASSIGNMENT;}
";"             {return SEMICOLON;}
","             {return COMMA;}
".."            {return DOUBLE_DOTS;}
false           {return BOOL_FALSE;}
true            {return BOOL_TRUE;}
{IDENTIFIER}    {return IDENTIFIER;}
{REAL_NUMBER}      {return NUMBER;}
{WHITESPACE}
{COMMENT}

\n             yylineno++;

.              printf("Lexical Error occured [%s] on line %d\n", yytext, yylineno);

%%